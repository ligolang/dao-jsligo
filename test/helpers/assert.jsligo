// Assert contract call results in failwith with given string
const stringFailure = (res: test_exec_result,expected: string) : unit => {
  let expected_bis = Test.eval (expected) ;
  match (res) {
    when(Fail(err)):
      match (err) {
        when(Rejected([michelson_program,address])): assert (Test.michelson_equal (michelson_program, expected_bis));
        when(Balance_too_low({ contract_too_low, contract_balance , spend_request })): Test.failwith ("contract failed for an unknown reason");
        when(Other(_str)): Test.failwith ("contract failed for an unknown reason");
      };
    when(Success(_nat)): Test.failwith ("bad price check");
  };
} ;

// Assert contract result is successful
export const txSuccess = (res: test_exec_result) : unit =>
  match (res) {
    when(Fail(err)): Test.failwith("Transaction should not fail");
    when(Success(_nat)): unit;
  };
