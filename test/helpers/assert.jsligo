// Assert contract call results in failwith with given string
export const stringFailure = (res: test_exec_result,expected: string) : unit => {
  let expected_bis = Test.eval (expected) ;
  match (res) {
    when(Fail(x)) : (
      match (x) {
        when (Rejected(x)) : assert (Test.michelson_equal (x[0], expected_bis));
        when (Balance_too_low(_)) : Test.failwith ("contract failed for an unknown reason");
        when (Other(_)) : Test.failwith ("contract failed for an unknown reason");
      });
    when(Success(_)) : Test.failwith ("bad price check");
  }
};

// Assert contract result is successful
export const txSuccess = (res: test_exec_result) : unit =>
  match (res) {
    when(Fail(_)) : Test.failwith("Transaction should not fail");
    when (Success(_)) : unit
  }
