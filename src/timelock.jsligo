#import "./errors.jsligo" "Errors"

export type t =
    {
        unlock_at: timestamp,
        // ^ timestamp for the unlock to happen

        relock_at: timestamp
        // ^ timestamp for the relock to happen
    };

export const make = (unlock_at: timestamp, timelock_period: nat) : t => ({
   unlock_at: unlock_at,
   relock_at: unlock_at + int(timelock_period as nat)
});

const isLocked = (t : t) : bool =>
    ((Tezos.get_now() < t.unlock_at) || (Tezos.get_now() >= t.relock_at));

export const _checkUnlocked = (t_opt : option<t>) : unit =>
    match(t_opt) {
        when(None): failwith(Errors.timelockNotFound);
        when(Some(t)): assert_with_error(!isLocked(t), Errors.timelockLocked);
    };

export const _checkLocked = (t_opt: option<t>) : unit =>
    match(t_opt) {
        when(None): failwith(Errors.timelockNotFound);
        when(Some(t)): assert_with_error(isLocked(t), Errors.timelockUnlocked);
    };
